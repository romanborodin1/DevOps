Решаем три проблемы:
1. Проблема прослушивания - информацию могут прочитать.
2. Проверка целостности - информацию могут подменить.
3. Проверка подлинности - человек посередине (общение через посредника-
злоумышленника).

Симметричное шифрование (шифрование симметричным ключом) - у двух лиц находится 
один и тот же ключ. С помощью симметричного ключа сообщение шифруется и дешифруется.
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 6d52f55358d611cf9ba6b91eab9b69053b0fbeb5

Ассиметричное шифрование - имеется публичный и приватный ключи. Пример: SSH.
Одному приватному ключу соответствует один публичный ключ и наоборот. Это пара.
Генерируется приватный, затем по специальному алгоритму генерируется публичный.
Имея публичный ключ вы можете ТОЛЬКО ЗАШИФРОВАТЬ сообщения. Имея приватный ключ
вы можете рашифровывать сообщения.

В обычном TLS используется и симметоричное, и ассиметричное шифрование. 
Ассиметричное шифрование более ресурсозатратное, т.к. постоянно нужно шифровать и
расшифровывать сообщения. 
Симметричное проще - один и тот же ключ используется и для шифрования, и для расшифровывания.
Нельзя передавать симметричный ключ в открытом виде. 

Примение ассиметричного алгоритма для передачи симметричного ключа:
1. Юзер А посылает юзеру Б свой публичный ключ + алгоритм и предлагает ему придумать и симметричный ключ,
зашифровать этот симметричный ключ предложеннным алгоритмом с помощью публичного ключа и вернуть этот 
зашифрованный хеш назад юзеру А.
2. Юзер Б шифрует свой  симметричный ключ публичным ключом юзера А и отправляет готовый хеш юзеру А.
3. Юзер А получает от юзера Б зашифрованный хеш. С помощью своего приватного ключа расшифровывает
сообщение юзера Б и получает симметричный ключ - теперь они оба имеют этот симметричный ключ.
4. Можно обемениваться сообщениями, используя теперь симметричное шифрование.

Проблема "человек посередине (проверка подлинности)" - юзер В.
После пункта 1. юзер В получает от юзера А публичный ключ, придумывает СВОЙ публичный ключ и 
отдает его юзеру Б. 
Получает от юзера Б шифрованный открытый ключ, сам выполняет пункт 2. 
Теперь есть 2 симметричных соединения: юзер А - юзер В и юзер В - юзер Б. Юзер В - посередине.

<<<<<<< HEAD
В роли юзера А выступает обычно сервер, у которого есть свой публичный ключ и приватный ключ. 

Проверка подлинности - 3-е лицо - ДОВЕРЕННОЕ ЛИЦО, - которому можно доверять - проверяет подлинность.
У доверенного лица есть публичный и приватный ключ. Когда юзер Б несет свою фотографию (доменное имя) доверенному 
лицу, тот подписиывает эту фотографию своим приватным ключом. И у юзера Б фотография и его публичный 
ключ связаны в единое целое, и это все подписано доверенным лицом.
Когда юзер Б будет отправлять сообщение юзеру А со своим публичным ключом, мы будем видеть фотографию,
то, что она подписана доверенным лицом и публичный ключ юзера Б. Если что-то изменить, потеряется подпись 
доверенного лица (подпись слетить). 

Серитификаты.
Првоеряется сначала CN (Common Name), пример: www.google.com, если это имя не совпадает с тем, что ввели в бразуере,
то сертификат не будет валиден. 
Когда я хочу получить сертификат, сначала я генерирую свой приватный ключ. Из него я получаю публичный ключ. В публчиной
части я добавляю информацию: Country, Organisation, Common Name и др.. Далее свой публичный ключ + всю эту информацию я 
отправляю в CA (Certificate Authority - центр сертификации).  CA - это доверенное лицо, которое может всю эту пачку документов 
подписать. Примеры CA: VeriSign, GlobalSign, Let's Encrypt и другие. 
Далее компания CA своим приватным ключом подписывает всю публичную связку документов и информацию о компании и 
отдает нам. 
Так сертификат с публичным ключом связан с приватной частью, то расшифровать может только тот, кто имеет приватный ключ.


=======
В роли юзера А выступает обычно сервер, у которого есть свой публичный ключ. 
>>>>>>> 446b2d2fbf81ed7370a93afe67b3b490283ac27b
>>>>>>> 6d52f55358d611cf9ba6b91eab9b69053b0fbeb5





